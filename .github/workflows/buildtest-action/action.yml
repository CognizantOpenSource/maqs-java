name: 'Build and test action'
description: 'Build and test something'
inputs:
  pom-file:
    description: 'pom file path'
    default: 'pom.xml'
    required: false
  bt-param: # id of input
    description: 'Build and test params'
    required: true
  artifact-name: # id of input
    description: 'Artifact name'
    required: true
  module-name: # id of module
      description: 'module namespace'
      required: true
  version:
    description: 'version number'
    required: true
runs:
  using: "composite"
  steps:
    - name: Set up JDK
      uses: actions/setup-java@v2.3.1
      with:
        distribution: zulu
        java-version: 11
    - name: Setup DotNet
      if: inputs.module-name == 'maqs-webservices'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          3.1.x
          6.x.x
    - name: Restore Local Maven Cache
      uses: actions/cache@v2.1.6
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{inputs.version}}.${{github.run_number}}
        restore-keys: |
            ${{ runner.os }}-maven-${{inputs.version}}
    - name: Build the docker-compose stack
      if: inputs.module-name == 'maqs-database'
      shell: bash
      run: docker-compose -f docker/MAQSSQLServer/docker-compose.yml -p CognizantOpenSource/maqs-java up -d
    - name: Start MAQS test services container
      if: inputs.module-name == 'maqs-webservices'
      shell: pwsh
      #run:  docker-compose -f docker/MAQSService/docker-compose.yml -p CognizantOpenSource/maqs-java up -d
      run: Start-Process -FilePath "dotnet" -ArgumentList "run --project docker/MAQSService/MainTestService/MainTestService.csproj"
    - name: Run Unit Tests
      shell: bash
      run: xvfb-run mvn test -Drevision=${{inputs.version}} -f ./${{inputs.module-name}}/${{inputs.pom-file}} ${{ inputs.bt-param }}
#      uses: GabrielBB/xvfb-action@v1.5
#      with:
#        run: mvn test -Drevision=${{inputs.version}} -f ./${{inputs.module-name}}/${{inputs.pom-file}} ${{ inputs.bt-param }}
    - id: random-number-generator
      run: echo "::set-output name=random-id::123"
      shell: bash
