name: Release Pipeline

on:
  release:
    types: [ published ]

jobs:
  release_information:
    name: Get Release Information
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.bash_v.outputs.version}}
      release_upload_url: ${{steps.get_release.outputs.upload_url}}
      release_html_url: ${{steps.get_release.outputs.html_url}}
      tag_name: ${{steps.get_release.outputs.tag_name}}
      release_id: ${{steps.get_release.outputs.id}}
    steps:
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Formatting Version Tag
        id: bash_v
        run: |
          version=${release_info_v//v}
          echo "::set-output name=version::${version}"
        env:
          release_info_v: ${{steps.get_release.outputs.tag_name}}
  release_build:
    name: Release Build and Test
    needs: release_information
    runs-on: ubuntu-latest
    env:
      JDK: 11
      VERSION: ${{needs.release_information.outputs.version}}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 15
        uses: actions/setup-java@v3.6.0
        with:
          java-version: 15
      - name: Maven Cache
        uses: actions/cache@v3.2.2
        with:
          path: ~/.m2
          key: ${{runner.os}}-m2
      - name: Create settings file
        uses: InstaCode/maven-settings-xml-action@v9
        with:
          profiles: '[{ "id": "sonar", "properties": { "sonar.organization":"magenic", "sonar.host.url":"https://sonarcloud.io", "sonar.login": "${{secrets.SONAR_LOGIN}}"}}]'
      - name: Print out version number from needs
        run: echo "${{env.VERSION}}"
      - name: Set Version to ${{env.VERSION}} and Run Unit Tests
        uses: GabrielBB/xvfb-action@v1.6
        with:
          run: mvn -Drevision="${{env.VERSION}}" -Dtesting -T 1C verify install -B -e -f pom.xml -fae -Djdk.version=${{env.JDK}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run SonarCloud Analysis
        run: mvn -Drevision="${{env.VERSION}}" -Psonar -B package sonar:sonar -e -f pom.xml -Dsonar.coverage.jacoco.xmlReportPaths="${{github.workspace}}/jmaqs-jacoco-reporting/target/site/jacoco-aggregate/jacoco.xml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Build Artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./**/*.jar
      - name: Publish Unit Test Results Report
        uses: scacap/action-surefire-report@v1
        if: ${{ always() }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: Unit Test Results
      - name: Upload Test Result Logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Logs
          path: ./**/logs

  deploy_release:
    name: Deploy Release Packages
    needs: [ release_build, release_information ]
    runs-on: ubuntu-latest
    env:
      JDK: 11
      VERSION: ${{needs.release_information.outputs.version}}
      TAG_NAME: ${{needs.release_information.outputs.tag_name}}
      RELEASE_ID: ${{needs.release_information.outputs.relase_id}}
    strategy:
      matrix:
        repo: [github, ossrh]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 15
        uses: actions/setup-java@v3.6.0
        with:
            java-version: 15
      - name: Maven Cache
        uses: actions/cache@v3.2.2
        with:
          path: ~/.m2
          key: ${{runner.os}}-m2
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5.2.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Create settings file
        uses: InstaCode/maven-settings-xml-action@v9
        with:
          servers: '[{"id": "ossrh", "username": "jason-edstrom", "password": "${{secrets.OSSRH_PACKAGES}}"},{"id": "github", "username": "jason-edstrom", "password": "${{secrets.PACKAGES}}"}]'
      - name: Create GitHub deployment - ${{matrix.repo}}
        uses: altinukshini/deployment-action@releases/v1
        id: deployment
        with:
          token: "${{ github.token }}"
          target_url: https://oss.sonatype.org/#nexus-search;quick~JMAQS
          environment: Release - ${{matrix.repo}}
      - name: Deploy Release v${{env.VERSION}} Packages to '${{matrix.repo}}' Repository
        run: mvn -Drevision="${{env.VERSION}}" -Ddeploy=${{matrix.repo}} -Prelease-${{matrix.repo}} deploy -B -e -f pom.xml -Djdk.version=${{env.JDK}}
      - name: Update deployment status (success)
        if: success()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://oss.sonatype.org/#nexus-search;quick~JMAQS
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: failure()
        uses: altinukshini/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://oss.sonatype.org/#nexus-search;quick~JMAQS
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      - name: Rollback Release
        if: failure()
        uses: author/action-rollback@stable
        with:
          # Using a known release ID
          id: ${{ env.RELEASE_ID }}
          # Using a tag name
          tag: ${{ env.TAG_NAME }}
          # Always delete the tag, even if a release is not associated with it.
          always_delete_tag: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  upload_release:
    name: Upload Release Artifacts
    needs: [ deploy_release, release_information ]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{needs.release_information.outputs.version}}
      RELEASE_URL: ${{needs.release_information.outputs.release_upload_url}}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: packages
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          filename: 'release.zip'
          path: ./
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: ${{ github.workspace }}/release.zip
          asset_name: release.zip
          asset_content_type: application/zip


